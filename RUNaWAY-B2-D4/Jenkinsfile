pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS_PWS = credentials('Hajer-dockerhub-token')
        DOCKERHUB_CREDENTIALS_USR = '000h'
        AWS_ACCESS_KEY_ID     = credentials('hajer-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('hajer-aws-secret-access-key')
        ARTIFACT_NAME = 'Dockerrun.aws.json'
        AWS_S3_BUCKET = 'hajer-belt2-artifacts-123456'
        AWS_EB_APP_NAME = 'Beltexam2day4Hajer'
        AWS_EB_ENVIRONMENT = 'Beltexam2day4hajer-env'
        AWS_EB_APP_VERSION = "${BUILD_ID}"
    } 
    
            
        }
        
        stage('Build') {
            steps {
                
                sh 'docker build -t 000h/runway:latest .'

                
            }
   
        }

        stage('Login') {

			steps {
				sh 'docker login -u=$DOCKERHUB_CREDENTIALS_USR -p=$DOCKERHUB_CREDENTIALS_PWS'
			}
		}

        stage('Push') {

			steps {
				sh 'docker push 000h/runway:latest'
			}
		}

        

    
             post {
                always {
                    junit '**/target/surefire-reports/TEST-*.xml'

                    sh 'docker logout'
                }

               

                success {
                    
                    archiveArtifacts 'target/*.jar'
                    sh 'aws s3 cp ./target/**.jar s3://$AWS_S3_BUCKET/$ARTIFACT_NAME'
                }
            }
        
       stage('Deploy') {
            steps {
                sh 'aws configure set region us-east-1'
                sh 'aws elasticbeanstalk create-application-version --application-name $AWS_EB_APP_NAME --version-label $AWS_EB_APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=$ARTIFACT_NAME'
                sh 'aws elasticbeanstalk update-environment --application-name $AWS_EB_APP_NAME --environment-name $AWS_EB_ENVIRONMENT --version-label $AWS_EB_APP_VERSION'
            }
            post {
                success {
                    echo 'success Jenkinsfile by Docker'
                   
                }

                always {
			        sh 'docker logout'
		        }
            }
           }
    }           
    
}
